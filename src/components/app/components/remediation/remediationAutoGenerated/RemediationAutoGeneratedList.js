/*
 * @Author: Virendra Patidar 
 * @Date: 2019-02-28 11:37:17 
 * @Last Modified by: Virendra Patidar
 * @Last Modified time: 2019-04-23 16:19:47
 */
import React, { PureComponent } from "react";

import { Checkbox, List, ListItem, ListItemText } from '@material-ui/core';
import Fade from '@material-ui/core/Fade';
import Popper from '@material-ui/core/Popper';
import AddIcon from '@material-ui/icons/Add';
import NoteIcon from '@material-ui/icons/Description';
import Loader from 'global/Loader';

import { Column, InfiniteLoader, SortDirection, Table, CellMeasurerCache, CellMeasurer } from "react-virtualized";
import AutoSizer from "react-virtualized/dist/commonjs/AutoSizer";

import { sNoCellRenderer, serviceCellRenderer, dateCellRenderer } from 'TableHelper/cellRenderer';

import { withRouter } from 'react-router-dom'
import { connect } from "react-redux"
import { bindActionCreators } from 'redux'
import { store } from 'client'
import { cloneDeep, pull } from "lodash";
import history from 'customHistory';

import * as remediationActions from 'actions/remediationAction'
import { showMessage } from 'actions/messageAction'
import { setProgressBar, setAlertsPlan, setActiveMenu, setActiveParentMenu } from 'actions/commonAction'
import * as alertsActions from 'actions/alertsAction';

import { fetchServiceIconPath } from 'utils/serviceIcon';
import { calculateAgoTimeByLongFormat } from 'utils/dateFormat';
import AddNoteDialogBox from './AddNoteDialogBox'
import ConfirmDialogBoxHOC from 'hoc/DialogBox'

const PriorityColorClass = { CRITICAL: 'text-danger', HIGH: 'text-orange', MEDIUM: 'text-warning', LOW: 'text-success', SUPPESSED: 'text-gray', WARNING: 'text-warning' }

class RemediationAutoGeneratedList extends PureComponent {

    _mounted = false

    _cache = new CellMeasurerCache({
        fixedWidth: true,
        minHeight: 60
    });

    state = {

        // Table attribute
        headerHeight: 40,
        rowHeight: 25,
        rowCount: 0,
        height: 450,
        sortBy: "service",
        sortDirection: SortDirection.ASC,

        pageNo: 0,
        perPage: 50,

        dataList: [],

        loading: true,
        anchorEl: null,
        open: false,

        //Attribute for open popover
        placement: null,
        popperEl: null,
        openPopOver: false,
        checked: [0],

        selectedAlerts: [],
        isMoreRecord: true,
        isBack: false,
        openNoteDialog: false,
        selectedAlert: undefined,
        isEnableNote: false,
        selectedRowIndex: 0,
        openStatusDialog: false
    };

    currentValue = this.props.filterData

    componentDidMount() {
        this._mounted = true
        const filterData = this.props.filterData
        if (this.props.location.state !== undefined) {
            this.setState({ isBack: true })
        }
        if (filterData.selectAccount.id !== 'all' && filterData.selectAccount.id !== undefined) {
            this._mounted = false
            this.fetchPrioritzedAlerts(filterData)
        }

        this.unsubscribe = store.subscribe(this.receiveFilterData)
    }

    receiveFilterData = data => {

        const currentState = store.getState()
        const previousValue = this.currentValue
        this.currentValue = currentState.uiReducer.filterData
        if (
            this.currentValue && previousValue !== this.currentValue
        ) {
            const filterData = cloneDeep(currentState.uiReducer.filterData)
            if (filterData.selectAccount.id !== 'all' && this._mounted) {
                this.fetchPrioritzedAlerts(filterData)
            }
        }
    }

    fetchPrioritzedAlerts(filterData) {
        let payload = {
            account_id: filterData.selectAccount.id,
            criteria: this.props.criteria
        }
        this.props.actions.fetchPrioritzedAlerts(payload).
            then(result => {
                this._mounted = true
                if (typeof result !== 'string') {
                    let alertList = []
                    let alertDataList = []
                    let summary = {
                        'CRITICAL': 0,
                        'HIGH': 0,
                        'MEDIUM': 0,
                        'LOW': 0
                    }
                    result.alerts.forEach(alert => {
                        summary[alert.rule.priority.name]++
                        if (this.props.priorityTitle === '' || this.props.priorityTitle === alert.rule.priority.name) {
                            alertList.push(alert.id)
                            alertDataList.push(alert)
                        }
                    })
                    if (this.props.priorityTitle !== '') {
                        result.alerts.forEach(alert => {
                            if (this.props.priorityTitle !== alert.rule.priority.name) {
                                alertList.push(alert.id)
                                alertDataList.push(alert)
                            }
                        })
                    }
                    const alert_sumary = [
                        { priority: "CRITICAL", open: summary["CRITICAL"] },
                        { priority: "HIGH", open: summary["HIGH"] },
                        { priority: "MEDIUM", open: summary["MEDIUM"] },
                        { priority: "LOW", open: summary["LOW"] }
                    ]
                    this.props.fetchAlertSummery(alert_sumary)
                    if (this.state.isBack) {
                        this.props.selectAlertEvent(this.props.alerts_plan)
                        alertList = this.props.alerts_plan
                    } else {
                        this.props.setAlertsPlan(alertList)
                        this.props.selectAlertEvent(alertList)
                    }
                    this.setState({ dataList: alertDataList, loading: false, selectedAlerts: alertList, isMoreRecord: result.length >= this.state.perPage }, () => {
                        this.props.setPlanName(result.name)
                    })
                } else {
                    console.log(' Error in fetching priority alerts :- ', result);
                }
            });
    }

    addComment = (alert, comment) => {
        const profile = JSON.parse(store.getState().userReducer.profile);
        const data = {
            "email": profile.email,
            "timestamp": Date.now(),
            "comment": comment
          }
        this.props.actions.addCommentAlert(this.props.filterData.selectAccount.id, alert, data).
            then(result => {
                if (typeof result !== 'string') {
                    this.setState({ openNoteDialog: false }, () => {
                        let message = { message: 'Saved Note', showSnackbarState: true, variant: 'success' }
                        this.props.showMessage(message)
                        let alternativeDataList = cloneDeep(this.state.dataList)
                        alternativeDataList[this.state.selectedRowIndex].comments.push(data)
                        this.setState({dataList: alternativeDataList})
                    });
                } else {
                    console.log(' Error in fetching alerts :- ', result);
                    this.setState({ openNoteDialog: false }, () => {
                        let message = { message: result, showSnackbarState: true, variant: 'error' }
                        this.props.showMessage(message)
                    });
                }
            });
        //this.setState({ openNoteDialog: false });
    };

    //   --------------------Table helper method Start-----------------------

    _isRowLoaded = ({ index }) => {
        return !!this.state.dataList[index];
    }

    _loadMoreRows = ({ startIndex, stopIndex }) => {
        if (this.state.isMoreRecord) {
            console.log(" load more ....", startIndex, stopIndex);
            let pageNo = Math.floor((startIndex) / this.state.perPage)
            if ((pageNo + this.state.perPage) !== this.state.pageNo) {
                this.setState({ pageNo: this.state.pageNo + this.state.perPage, filterProgress: true }, () => {
                    const filterData = this.props.filterData
                    this.fetchPrioritzedAlerts(filterData)
                });
            }
        }
    }

    sort = ({ sortBy, sortDirection }) => {

    }

    noRowsRenderer = () => {
        if (!this.state.loading) {
            return (<div className="data-not-found">
                <span>Records Not Found</span>
            </div>)
        }
        else if (this.state.loading) {
            return <Loader />
        }
    }

    priorityCellRenderer = ({ ...params }) => {
        const priority = params.rowData.rule.priority ? params.rowData.rule.priority.name : ''
        let component = (
            <div>
                {priority !== undefined && <span className={PriorityColorClass[priority.toUpperCase()] + ' mrR5'}><i className="fa fa-circle"></i></span>}
                {priority}
            </div>
        )

        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    }

    alertIdAnchorCellRenderer = ({ ...params }) => {
        const alertId = params.rowData.asset.asset_type.cloud + '-' + params.rowData.asset.asset_type.cloud_service_name + '-' + params.rowData.id.substring(0, 6)
        let component = (
            <div>
                <a onClick={() => history.push({ pathname: '/app/alerts/detail/' + params.rowData.id, state: { alert: params.rowData, backUrl: '/app/remediation/auto-generated', backUrlState: { value: this.props.value } } })} href="javascript:void(0)">{alertId.toUpperCase()}</a>
            </div>
        );

        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    };

    complianceRenderer = ({ cellData }) => {
        return (
            <div>
                {cellData.map((item, index) => {
                    return <span key={index} className="chip-white mrR5">{item}</span>
                })}
                {cellData.length > 2 && <span className="link-hrf">+{cellData.length - 2}</span>}
            </div>
        )
    }

    validateCellData = ({ ...params }) => {
        let cellData = params.cellData
        if (cellData === undefined || cellData === null || cellData === '' || cellData.length === 0) {
            cellData = 'N/A'
        }
        params['component'] = cellData
        return this.wrapComponentCellRenderer(params)
    }

    assetNameCellRenderer = ({ ...params }) => {
        const assetName = params.cellData.asset_type.cloud_service_name
        let component = (
            <div className="service-icon" title={assetName}>
                {assetName !== undefined && <img src={fetchServiceIconPath(assetName)} />} {params.cellData.data[params.cellData.asset_type.discriminator[0]]}
            </div>
        );

        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    }

    regionRenderer = ({ ...params }) => {
        const region = params.rowData.asset.data.region ? params.rowData.asset.data.region : 'N/A'
        let component = (
            <div>
                {region.toUpperCase()}
            </div>
        )

        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    }

    exposureTimeCellRenderer = ({ ...params }) => {
        let component = (
            <div>
                {calculateAgoTimeByLongFormat(params.rowData.asset.first_seen)}
            </div>
        )
        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    }

    ruleCellRenderer = ({ ...params }) => {
        let component = (
            <div>
                <a href="javascript:void(0)" onClick={() => this.redirectToRulePage(params.rowData)}>{params.rowData.rule.label}</a>
            </div>
        );

        params['component'] = component
        return this.wrapComponentCellRenderer(params)
    }

    redirectToRulePage = (rowData) => {
        let assetName = (rowData.asset.asset_type.name).split('_')[0]
        this.props.setActiveMenu('Security Rules')
        this.props.setActiveParentMenu('Governance')
        history.push({ pathname: '/app/rules/detail/', state: { rule: rowData.rule, asset_type: assetName, backUrl: '/app/remediation/auto-generated', backUrlState: { value: this.props.value } } })
    }

    handleClosePopper = () => {
        this.setState(state => ({
            open: false
        }))
    }

    addToPlanCellRenderer = ({ cellData, rowData }) => {
        const isChecked = this.state.selectedAlerts.indexOf(rowData.id) > -1
        return (
            <Checkbox
                checked={isChecked}
                tabIndex={-1}
                disableRipple
                className="filter-checkbox"
                color="primary"
                onChange={() => this.handleAddPlan(rowData.id, isChecked)}
            />
        )
    }

    handleAddPlan = (alertId, isChecked) => {
        let selectedAlerts = cloneDeep(this.state.selectedAlerts)
        if (isChecked) {
            selectedAlerts = pull(selectedAlerts, alertId)
        } else {
            selectedAlerts.push(alertId)
        }
        this.setState({ selectedAlerts }, () => {
            this.props.setAlertsPlan(selectedAlerts)
            this.props.selectAlertEvent(this.state.selectedAlerts)
        })
    };

    handleClick = (placement, dataKey) => (event) => {
        const { currentTarget } = event;
        if (dataKey === 'priority') {
            this.setState(state => ({
                popperEl: currentTarget,
                openPopOver: state.placement !== placement || !state.openPopOver,
                placement,
            }));
        } else {
            this.setState(state => ({
                popperEl: currentTarget,
                openPopOver: false,
                placement,
            }));
        }

    };

    handleClose = () => {
        this.setState({ open: false });
    };


    headerRenderer = ({ dataKey, label }) => {
        const { popperEl, openPopOver, placement } = this.state;


        return (
            <div className="table-td">
                <span onClick={this.handleClick('bottom-start', dataKey)}>{label}</span>
                {dataKey === 'priority' && <Popper style={{ zIndex: '10', marginTop: '10px' }} open={openPopOver} anchorEl={popperEl} placement={placement} transition>
                    {({ TransitionProps }) => (
                        <Fade {...TransitionProps} timeout={350}>
                            <div>
                                <List className="list-filter">
                                    <ListItem className="list-search-filter">
                                        <input placeholder="Search" autoFocus type="text" />
                                    </ListItem>
                                    {['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'Suppesssed'].map(value => (
                                        <ListItem className="list-filter-item" key={value} role={undefined} dense button>
                                            <Checkbox
                                                checked={this.state.checked.indexOf(value) !== -1}
                                                tabIndex={-1}
                                                disableRipple
                                                className="filter-checkbox"
                                                color="primary"
                                            />
                                            <ListItemText className="list-filter-text" primary={value} />

                                        </ListItem>
                                    ))}
                                </List>
                            </div>
                        </Fade>
                    )}
                </Popper>}
            </div>
        );
    }


    SuppressAlerts(type, data) {
        if (type === 'suppress') {
            this.props.actions.suppressAlert(data).
                then(result => {
                    if (this._mounted) {
                        if (result && (typeof result === 'string')) {
                            this.setState((pre) => ({ isEnableNote:!pre.isEnableNote }))
                            let message = { message: result, showSnackbarState: true, variant: 'error' }
                            this.props.showMessage(message)
                        } else {
                            mixpanel.track("Suppress", {
                                "Item Type": "Alert",
                                "Name of Item": data.id,
                            });
                        }
                    }
                })
        } else if (type === 'unsuppress') {
            this.props.actions.unSuppressAlert(data).
                then(result => {
                    if (this._mounted) {
                        if (result && (typeof result === 'string')) {
                            this.setState((pre) => ({ isEnableNote:!pre.isEnableNote }))
                            let message = { message: result, showSnackbarState: true, variant: 'error' }
                            this.props.showMessage(message)
                        }
                    }
                })
        }
    }

      enableDisableSuppress = () => {
        const dataList = cloneDeep(this.state.dataList)
        let newDataList = dataList.map((row, sidx) => {
            if (this.state.rowIndex !== sidx) {
                return row;
            } else {
                const currentStatus = this.state.currentStatus;
                let type = 'suppress'
                if (currentStatus) {
                    type = 'unsuppress'
                }
                this.SuppressAlerts(type, { id: row.id, cloud_account_id: this.props.filterData.selectAccount.id })
                this.setState({selectedAlert: { ...row, suppressed: !currentStatus }});
                return { ...row, suppress: !currentStatus, suppressed: !currentStatus };
            }
        });
        this.setState({ dataList: newDataList, openStatusDialog: false }, () => {
        });
    }

    

    //   --------------------Table helper method End-----------------------

    wrapComponentCellRenderer = (params) => {
        return (
            <CellMeasurer
                cache={this._cache}
                columnIndex={params.columnIndex}
                key={params.dataKey}
                parent={params.parent}
                rowIndex={params.rowIndex}>
                <div
                    className={"tableColumn"}
                    style={{
                        whiteSpace: 'normal'
                    }}>
                    {params.component}
                </div>
            </CellMeasurer>
        );
    }

    notesCellRenderer = ({ cellData, rowData, rowIndex }) => {
        return (
            <a onClick={() => this.handleNoteDialogOpen(rowData, rowIndex)} className="add-icon" href="javascript:void(0)">
                {cellData.length > 0 ? <NoteIcon /> : <AddIcon />}
            </a>
        )
    }

    handleNoteDialogOpen = (alert, rowIndex) => {
        this.setState({
            isEnableNote: alert.suppressed ? alert.suppressed : false,
            selectedRowIndex: rowIndex,
            selectedAlert: alert,
            openNoteDialog: true,
        });
    };

    handleNoteDialogClose = () => {
        this.setState({ openNoteDialog: false });
    };

    statusChangeDialog = (cellData, rowIndex) => {
        this.setState({ openStatusDialog: true, rowIndex, currentStatus: cellData });
    }

    handleDialogClose = () => {
        this.setState((pre) => ({ isEnableNote:!pre.isEnableNote, openStatusDialog: false }))
    }

    enableDisableNote = () => {
        // this.setState((pre) => ({ isEnableNote: !pre.isEnableNote }))
        this.setState((pre) => ({ isEnableNote:!pre.isEnableNote }), () => {
            this.statusChangeDialog(this.state.selectedAlert.suppressed, this.state.selectedRowIndex)
        })
    }

    render() {
        const {
            headerHeight,
            sortBy,
            sortDirection,
            dataList,
            openNoteDialog,
            selectedAlert,
            isEnableNote,
            openStatusDialog,
            currentStatus 
        } = this.state;

        const sortedList = dataList;

        return (
            <div style={{ height: "100%", maxHeight: "100%" }}>
                <AutoSizer>
                    {({ height, width }) => (
                        <InfiniteLoader
                            isRowLoaded={this._isRowLoaded}
                            loadMoreRows={this._loadMoreRows}
                            rowCount={100}
                            height={height}
                            threshold={10}
                        >
                            {({ onRowsRendered, registerChild }) => (
                                <Table
                                    headerHeight={headerHeight}
                                    height={height}
                                    rowCount={dataList.length}
                                    rowGetter={({ index }) => sortedList[index]}
                                    rowHeight={this._cache.rowHeight}
                                    //sort={this.sort}
                                    sortBy={sortBy}
                                    sortDirection={sortDirection}
                                    onRowsRendered={onRowsRendered}
                                    noRowsRenderer={this.noRowsRenderer}
                                    width={width}
                                    className="data-table table-no-border"
                                >

                                    <Column
                                        dataKey="id"
                                        label="Alert ID"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.alertIdAnchorCellRenderer}
                                        disableSort={true}
                                        width={120}
                                        flexGrow={1}
                                    />

                                    <Column
                                        dataKey="priority"
                                        label="Priority"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.priorityCellRenderer}
                                        disableSort={false}
                                        width={100}
                                        flexGrow={2}

                                    />

                                    <Column
                                        dataKey="summary"
                                        label="Alert Description"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.validateCellData}
                                        disableSort={false}
                                        width={120}
                                        flexGrow={3}
                                    />

                                    <Column
                                        dataKey="first_seen"
                                        label="Exposure Time"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.exposureTimeCellRenderer}
                                        disableSort={false}
                                        width={100}
                                        flexGrow={4}
                                    />

                                    {/* <Column
                                        dataKey="compliance_tags"
                                        label="Compliance"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.complianceRenderer}
                                        disableSort={true}
                                        width={150}
                                        flexGrow={5}
                                    /> */}

                                    <Column
                                        dataKey="asset"
                                        label="Asset Name"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.assetNameCellRenderer}
                                        disableSort={false}
                                        width={150}
                                        flexGrow={6}
                                    />

                                    <Column
                                        dataKey="region"
                                        label="Region"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.regionRenderer}
                                        disableSort={false}
                                        width={120}
                                        flexGrow={7}
                                    />

                                    <Column
                                        dataKey="rule"
                                        label="Rule ID"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.ruleCellRenderer}
                                        disableSort={false}
                                        width={100}
                                        flexGrow={8}
                                    />

                                    <Column
                                        dataKey="addToPlan"
                                        label="Add to Plan"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.addToPlanCellRenderer}
                                        disableSort={false}
                                        width={50}
                                        flexGrow={9}
                                    />
                                    <Column
                                        dataKey="comments"
                                        label="Notes"
                                        headerRenderer={this.headerRenderer}
                                        cellRenderer={this.notesCellRenderer}
                                        disableSort={false}
                                        width={80}
                                        flexGrow={10}

                                    />

                                </Table>
                            )}
                        </InfiniteLoader>
                    )}
                </AutoSizer>

                <ConfirmDialogBoxHOC
                    isOpen={openStatusDialog}
                    handleDialogClose={this.handleDialogClose}
                    title={'Confirmation'}
                    cancelBtnLabel={"CANCEL"}
                    confirmBtnLabel={currentStatus === true ? "ACTIVE" : "SUPPRESS"}
                    content={(currentStatus === true) ? 'Are you sure you want to Active this Alert ?' : 'Are you sure you want to Suppress this Alert ?'}
                    successDialogEvent={this.enableDisableSuppress} />

                <AddNoteDialogBox
                    isOpen={openNoteDialog}
                    alert={selectedAlert}
                    isEnableNote={isEnableNote}
                    enableDisableNote={this.enableDisableNote}
                    addComment={this.addComment}
                    handleNoteDialogClose={this.handleNoteDialogClose}
                />
            </div>
        );
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        actions: bindActionCreators(Object.assign({}, remediationActions, alertsActions), dispatch),
        showMessage: message => {
            dispatch(showMessage(message))
        }, setProgressBar: isProgress => {
            dispatch(setProgressBar(isProgress))
        }, setAlertsPlan: alerts_plan => {
            dispatch(setAlertsPlan(alerts_plan))
        }, setActiveMenu: activeMenu => {
            dispatch(setActiveMenu(activeMenu))
        }, setActiveParentMenu: activeMenu => {
            dispatch(setActiveParentMenu(activeMenu))
        }
    };
}

const mapStateToProps = (state, ownProps) => ({
    filterData: state.uiReducer.filterData,
    alerts_plan: state.commonReducer.alerts_plan
})

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(RemediationAutoGeneratedList))