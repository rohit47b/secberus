/*
 * @Author: Virendra Patidar 
 * @Date: 2018-11-16 14:55:42 
 * @Last Modified by: Virendra Patidar
 * @Last Modified time: 2019-03-14 12:20:29
 */

import React, { PureComponent } from 'react';

import { Typography } from '@material-ui/core';
import Card from '@material-ui/core/Card';
import Button from '@material-ui/core/Button'
import CardContent from '@material-ui/core/CardContent';
import Grid from '@material-ui/core/Grid';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import Chip from '@material-ui/core/Chip';
import history from 'customHistory'

import { AlertCount } from 'hoc/AlertCount';
import { HelperPopup } from 'hoc/HelperPopup';
import SearchField from 'global/SearchField'

import ComplianceChart from '../../dashboard/components/compliance/ComplianceChart'
import RemediationAutoGeneratedList from './RemediationAutoGeneratedList'

import CreatePlan from './CreatePlan'

import { withRouter } from 'react-router-dom'

import { connect } from "react-redux"
import { bindActionCreators } from 'redux'
import { store } from 'client'
import { cloneDeep, find } from "lodash"

import { showMessage } from 'actions/messageAction'
import { setProgressBar, setActiveMenu, setAlertsPlan } from 'actions/commonAction'
import * as remediationActions from 'actions/remediationAction'
import * as securityActions from 'actions/securityAction'
import * as complianceActions from 'actions/complianceAction'

const alertClassName = { CRITICAL: 'alert-critical', HIGH: 'alert-high', MEDIUM: 'alert-mid', LOW: 'alert-low' }

class remediationAutoGenerated extends PureComponent {

    _mounted = false

    state = {
        search: '',
        anchorEl: null,
        open: false,
        placement: null,
        value: 0,
        openDialog: false,
        selectedAlerts: [],

        alert_summery_list: [
            { type: "CRITICAL", count: 0 },
            { type: "HIGH", count: 0 },
            { type: "MID", count: 0 },
            { type: "LOW", count: 0 },
            { type: "Suppessed", count: 0 }
        ],
        total_alerts: 0,
        ComplianceData: {},
        criteria: ['priority', 'risk', 'age'],
        selectedCriteria: 'priority',
        planName: '',
        loading: false,
        creating: false,
        savedPlan: false,
        priorityTitle: ''
    }

    searchHandler = name => event => {
        this.setState({ search: event.target.value })
    }

    componentDidMount() {
        this._mounted = true
        const filterData = this.props.filterData
        if (filterData.selectAccount.id !== 'all' && filterData.selectAccount.id !== undefined) {
            this._mounted = false
            //this.fetchAlertSummery(filterData)
            this.fetchComplianceSummery(filterData)
        }

        if (this.props.location.state !== undefined){
            if (this.props.location.state.backUrlState !== undefined){
                if (this.props.location.state.backUrlState.value !== undefined) {
                    this.setState({value: this.props.location.state.backUrlState.value})
                }
            }
        }

        this.unsubscribe = store.subscribe(this.receiveFilterData)
    }

    receiveFilterData = data => {

        const currentState = store.getState()
        const previousValue = this.currentValue
        this.currentValue = currentState.uiReducer.filterData
        if (
            this.currentValue && previousValue !== this.currentValue
        ) {
            const filterData = cloneDeep(currentState.uiReducer.filterData)
            if (filterData.selectAccount.id !== 'all' && this._mounted) {
                //this.fetchAlertSummery(filterData)
                this.fetchComplianceSummery(filterData)
            }
        }
    }

    /* fetchAlertSummery(filterData) {
        let payload = {accountId: filterData.selectAccount.id}

        this.props.actions.fetchAlertSummery(payload).
            then(result => {
                this._mounted = true
                if (typeof result !== 'string') {
                    this.setState({ alert_summery_list: result.summary, total_alerts: result.alert_count })
                } else {
                    console.log(' Error in fetching alert summery :- ',result);
                }
            });
    } */

    fetchAlertSummery= (summary) => {
        this.setState({ alert_summery_list: summary })
    }

    fetchComplianceSummery(filterData) {
        let payload = {accountId:filterData.selectAccount.id}

        this.props.actions.fetchComplianceSummery(payload).
            then(result => {
                if (typeof result !== 'string') {
                    this._mounted = true
                    let ComplianceData = {}
                    result.map(item => {
                        if (item.compliance.indexOf('PCI') !== -1) {
                            ComplianceData['PCI'] = {passed: item.passed, failed: item.failed, percent: item.percent.toFixed(0)}
                        }
                        if (item.compliance.indexOf('HIPAA') !== -1) {
                            ComplianceData['HIPAA'] = {passed: item.passed, failed: item.failed, percent: item.percent.toFixed(0)}
                        }
                    })
                    this.setState({ComplianceData})
                } else {
                    console.log(' Error in fetching compliance summery :- ', result);
                }
            });
    }

    savePlan = () => {
        this.setState({creating: true})
        let payload = {
            account_id:this.props.filterData.selectAccount.id,
            name: this.state.planName,
            alerts: this.state.selectedAlerts
        }

        this.props.actions.savePlan(payload).
            then(result => {
                console.log('result plan id',result.id)
                if (result && (typeof result !== 'string')) {
                    this.props.setAlertsPlan([])
                    mixpanel.track("User implements a remediaiton plan for tracking", {
                        "Type": "Auto",
                        "Last Date Created": result.create_timestamp,
                        "Type of auto ": this.state.selectedCriteria,
                    });
                    this.setState({creating: false, savedPlan: true})
                    this.props.showMessage({ message: 'You have successfully created "'+this.state.planName+'"', showSnackbarState: true, variant: 'success',reportData:{id:result.id} });
                    this.handleCloseDialog()
                    history.push(`/app/dashboard/home`)
                } else {
                    this.setState({creating: false})
                    this.props.showMessage({ message: 'Internal Error', showSnackbarState: true, variant: 'error' });
                    this.handleCloseDialog()
                }
            });
    };

    toggleDrawer = (alertTitle) => {
        this.setState({loading: true}, () => {
            let priority = ''
            if (alertTitle !== this.state.priorityTitle) {
                priority = alertTitle
            }
            this.setState({priorityTitle: priority}, () => {
                this.setState({loading: false})
            })
        })
    };

    setSelectManually = () => {
        this.props.setActiveMenu('Alerts')
        history.push('/app/alerts')
    }

    handleOpenPopper = (placement) => (event) => {
        const { currentTarget } = event;
        this.setState(state => ({
            anchorEl: currentTarget,
            open: state.placement !== placement || !state.open,
            placement,
        }))
    }

    handleClosePopper = () => {
        this.setState(state => ({
            open: false
        }))
    }

    handleTabChange = (event, value) => {
        this.setState({loading: true}, () => {
            this.setState({ value, selectedCriteria: this.state.criteria[value], loading: false });
        }) 
    };

    handleOpenDialog = () => {
        this.setState({ openDialog: true });
    };

    handleCloseDialog = () => {
        this.setState({ openDialog: false });
    };

    selectAlertEvent = (selectedAlerts) => {
        this.setState({ selectedAlerts })
    }

    setPlanName = (planName) => {
        this.setState({ planName })
    }

    render() {
        mixpanel.track("View Page", {
            "Page Name": 'Remediation',
        });
        const { placement, data, anchorEl, open, value, openDialog, selectedAlerts,alert_summery_list, total_alerts, ComplianceData, selectedCriteria, planName, loading, creating, savedPlan, priorityTitle } = this.state;

        const scale = d3.scale.ordinal().range(['#24BA4D', '#24BA4D', '#24BA4D', '#ECD24E', '#ECD24E', '#ECD24E', '#ECA84E', '#ECA84E', '#ECA84E', '#fcfcfc', '#fcfcfc']);
        return (
            <Card className="card-wizard card-panel card-inner card-remediation">
                <div className="card-title">
                <h3 className="card-heading flexGrow1">Remediation / Autogenerated Remediation <span onClick={this.handleOpenPopper('bottom-start')} className={open == true ? "alert-icon mrL10  active" : 'alert-icon mrL10'}><i className="fa fa-question-circle" aria-hidden="true"></i></span></h3>
                    <div className="d-flex align-item-center fnt-13 mrT10">
                        <span className="font-normal">Autogenerated Plans:</span>
                        <Tabs
                            value={value}
                            onChange={this.handleTabChange}
                            className="tab-wrapper tab-nav-btn mrR10 mrL10"
                        >
                            <Tab
                                disableRipple
                                label="Priority"
                                className="tab-btn"
                            />
                            <Tab
                                disableRipple
                                label="Improve risk score"
                                className="tab-btn"
                            />
                            <Tab
                                disableRipple
                                label="Age"
                                className="tab-btn"
                            />
                        </Tabs>
                        <span className="link-hrf" onClick={this.setSelectManually}>Select manually</span>
                    </div>
                </div>
                <CardContent className="card-body">
                    <div className="tab-container">
                        <div className="container">
                            <Grid container spacing={24} className="mrB20">
                                <Grid item sm={12}>
                                    <div className="d-flex content-info">
                                        <div className="alert-count mrR20">
                                        {alert_summery_list.map((alert, index) => <AlertCount key={`${alert.priority}${index}`} toggleDrawer={this.toggleDrawer} borderColorClass={alertClassName[alert.priority]} alertTitle={alert.priority} alertCount={<span>{alert.open}</span>} />)}
                                        {/*                                             
                                            <AlertCount borderColorClass={"alert-critical"} alertTitle={"CRITICAL"} alertCount={<span>12<span className="fnt-11">/100</span></span>} />
                                            <AlertCount borderColorClass={"alert-high"} alertTitle={"HIGH"} alertCount={<span>05<span className="fnt-11">/100</span></span>} />
                                            <AlertCount borderColorClass={"alert-mid"} alertTitle={"MID"} alertCount={<span>10<span className="fnt-11">/100</span></span>} /> 
                                        */}
                                        </div>
                                        <div className="d-flex align-item-center">
                                            {/*<span className="plan-title">
                                                Remediation Plan <br />Projections
                                                </span>
                                            <span className="count-plan">
                                                44
                                            <Chip className="chip-rounded chip-mid mrL10" label="Medium" />
                                            </span> */}
                                            <div className="d-flex">
                                                { 'PCI' in ComplianceData && (
                                                    <ComplianceChart title={'PCI'} passed={ComplianceData['PCI'].passed} failed={ComplianceData['PCI'].failed} percantage={ComplianceData['PCI'].percent} isShowLegend={false} />
                                                )}
                                                { 'HIPAA' in ComplianceData && (
                                                    <ComplianceChart title={'HIPAA'} passed={ComplianceData['HIPAA'].passed} failed={ComplianceData['HIPAA'].failed} percantage={ComplianceData['HIPAA'].percent} isShowLegend={false} />
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </Grid>

                                <Grid item sm={12}>
                                    <Typography component="p" className="fnt-13">
                                        This page shows the autogenerated remediation plans that have been optimally selected to minimize your global Risk Score.Click "Created Remediation" to launch the optimal autogenerated remediation plan or choose between the other autogenerated remediation plans based on compliance priority.You can also create manual remediation plan by choosing "Select Manually".
                                        You can also add or remove Alerts from the plan.
                                    </Typography>
                                </Grid>
                            </Grid>
                            <Grid container spacing={24}>
                                <Grid item sm={12} className="pdT0">
                                    <div className="d-flex justify-flex-end">
                                        {/* <Button onClick={this.handleOpenDialog} disabled={selectedAlerts.length === 0} className="btn-primary mrR10">Save Plan</Button> */}
                                        {creating ? <Button disabled={true} className="btn-primary mrR10">Saving Plan <i className="fa fa-fw fa-spinner fa-pulse"></i></Button> : <Button onClick={this.savePlan} disabled={planName === '' || savedPlan} className="btn-primary mrR10">Save Plan</Button>}
                                        <SearchField handleChange={this.searchHandler} />
                                    </div>
                                </Grid>
                            </Grid>
                            <Grid container spacing={24} className="grid-container">
                                <Grid item sm={12}>
                                    {!loading &&
                                        <RemediationAutoGeneratedList selectAlertEvent={this.selectAlertEvent} setPlanName={this.setPlanName} criteria={selectedCriteria} priorityTitle={priorityTitle} fetchAlertSummery={this.fetchAlertSummery} value={value}/>
                                    }
                                </Grid>
                            </Grid>
                        </div>
                    </div>
                </CardContent>
                <HelperPopup title={"Create Remediation Plan"} addClass={"popperWidth"} content={'This page shows the autogenerated remediation plans that have been optimally selected to minimize your global Risk Score.Click "Created Remediation" to launch the optimal autogenerated remediation plan or choose between the other autogenerated remediation plans based on compliance priority.You can also create manual remediation plan by choosing "Select Manually".You can also add or remove Alerts from the plan. '} anchorEl={anchorEl} open={open} placement={placement} handleClosePopper={this.handleClosePopper} />
                {/* <CreatePlan selectedAlerts={selectedAlerts} accountId={this.props.filterData.selectAccount.id} openDialog={openDialog} handleCloseDialog={this.handleCloseDialog} /> */}
            </Card>
        )
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        actions: bindActionCreators(Object.assign({}, remediationActions,securityActions, complianceActions), dispatch),
        showMessage: message => {
            dispatch(showMessage(message))
        }, setProgressBar: isProgress => {
            dispatch(setProgressBar(isProgress))
        }, setActiveMenu: activeMenu => {
            dispatch(setActiveMenu(activeMenu))
        }, setAlertsPlan: alerts_plan => {
            dispatch(setAlertsPlan(alerts_plan))
        }
    };
}

const mapStateToProps = (state, ownProps) => ({
    filterData: state.uiReducer.filterData,
})

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(remediationAutoGenerated))